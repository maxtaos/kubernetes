# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% set INSTANCE_TEMPLATE = env["name"] + "-instance-template" %}
{% set LEADER_INSTANCE = env["name"] + "-leader" %}
{% set WEB_SERVER_TAG = env["name"] %}
{% set FIREWALL = env["name"] + "-firewall" %}
{% set AUTOSCALER = env["name"] + "-autoscaler" %}
{% set INSTANCE_GROUP = properties["instance_group"] %}

resources:
# Firewall that allows Network LB to connect to web servers
- name: {{ FIREWALL }}
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/global/networks/default
    sourceRanges: [ "0.0.0.0/0" ]
    targetTags: [{{ WEB_SERVER_TAG }}]
    allowed:
    - IPProtocol: tcp
      ports: [ "80" ]

- name: {{ INSTANCE_TEMPLATE }}
  type: compute.v1.instanceTemplate
  properties:
    project: {{ env["project"] }}
    properties:
      machineType: {{ properties["machine_type"] }}
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: {{ properties["image"] }}
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/global/networks/default
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      serviceAccounts:
      - email: "default"
        scopes:
        - "https://www.googleapis.com/auth/devstorage.read_only"
        - "https://www.googleapis.com/auth/logging.write"
      tags:
        items:
        - {{ WEB_SERVER_TAG }}
      metadata:
        items:
        - key: startup-script
          value: |
            #! /bin/bash

            # Install Google Cloud Logging
            curl -s "https://storage.googleapis.com/signals-agents/logging/google-fluentd-install.sh" | bash

            # Install Chef
            curl -LO https://omnitruck.chef.io/install.sh && sudo bash ./install.sh -v 11.18.12 && rm install.sh

            # Download runlist and cookbooks
            curl -L {{ properties["chef_node_url"] }} > /tmp/node.json

            # Define cookbooks path
            echo "cookbooks_path '/var/chef/site-cookbooks'" > /tmp/solo.rb

            # Configure instance
            chef-solo  -c /tmp/solo.rb -l debug -j /tmp/node.json -r {{ properties["chef_cookbook_url"] }}
        - key: storage-bucket
          value: {{ properties["storage_bucket"] }}
        - key: dbinstance
          value: {{ properties["dbinstance"] }}
        - key: dbname
          value: {{ properties["dbname"] }}
        - key: dbuser
          value: {{ properties["dbuser"] }}
        - key: dbpassword
          value: {{ properties["dbpassword"] }}
        - key: dbhost
          value: {{ properties["dbhost"] }}
        - key: gcs-access-key
          value: {{ properties["gcs_access_key"] }}
        - key: gcs-secret
          value: {{ properties["gcs_secret"] }}

{% for zone in properties["zones"] %}
# Instance Group Manager for web servers
- name: {{ INSTANCE_GROUP + "-" + zone }}
  type: compute.v1.instanceGroupManager
  properties:
    zone: {{ zone }}
    targetSize: {{ properties["zones"][zone]["desired_web_servers"] }}
    baseInstanceName: {{ env["name"] }}
    instanceTemplate: $(ref.{{ INSTANCE_TEMPLATE }}.selfLink)

# Autoscaler
- name: {{ AUTOSCALER + "-" + zone}}
  type: compute.v1.autoscaler
  properties:
    zone: {{ zone }}
    target: $(ref.{{ INSTANCE_GROUP + "-" + zone }}.selfLink)
    autoscalingPolicy:
      maxNumReplicas: {{ properties["zones"][zone]["max_web_servers"] }}
      minNumReplicas: {{ properties["zones"][zone]["min_web_servers"] }}
      loadBalancingUtilization:
        utilizationTarget: .8
{% endfor %}

# Leader
- name: {{ LEADER_INSTANCE }}
  type: compute.v1.instance
  properties:
    machineType:  https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["leader"]["zone"] }}/machineTypes/{{ properties["machine_type"] }}
    zone: {{ properties["leader"]["zone"] }}
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: {{ properties["image"] }}
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/global/networks/default
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    serviceAccounts:
    - email: "default"
      scopes:
      - "https://www.googleapis.com/auth/devstorage.full_control"
      - "https://www.googleapis.com/auth/sqlservice.admin"
      - "https://www.googleapis.com/auth/compute"
      - "https://www.googleapis.com/auth/logging.write"
    tags:
      items:
      - {{ WEB_SERVER_TAG }}
    metadata:
      items:
      - key: startup-script
        value: |
          #! /bin/bash

          # Install Google Cloud Logging
          curl -s "https://storage.googleapis.com/signals-agents/logging/google-fluentd-install.sh" | bash

          # Install Chef
          curl -LO https://omnitruck.chef.io/install.sh && sudo bash ./install.sh -v 11.18.12 && rm install.sh

          # Download runlist and cookbooks
          curl -L {{ properties["chef_node_url"] }} > /tmp/node.json

          # Define cookbooks path
          echo "cookbooks_path '/var/chef/site-cookbooks'" > /tmp/solo.rb

          # Configure instance
          chef-solo -c /tmp/solo.rb -l debug -j /tmp/node.json -r {{ properties["chef_cookbook_url"] }}
      - key: storage-bucket
        value: {{ properties["storage_bucket"] }}
      - key: leader
        value: "true"
      - key: dbinstance
        value: {{ properties["dbinstance"] }}
      - key: dbname
        value: {{ properties["dbname"] }}
      - key: dbuser
        value: {{ properties["dbuser"] }}
      - key: dbpassword
        value: {{ properties["dbpassword"] }}
      - key: dbhost
        value: {{ properties["dbhost"] }}
      - key: gcs-access-key
        value: {{ properties["gcs_access_key"] }}
      - key: gcs-secret
        value: {{ properties["gcs_secret"] }}
